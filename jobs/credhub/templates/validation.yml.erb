<%=

  def is_boolean(x)
    !!x == x
  end

   datastorage_type = p('credhub.data_storage.type')

   if datastorage_type == 'postgres' || datastorage_type == 'mysql'
    if_p('credhub.data_storage.require_tls') do |require_tls|
      if !is_boolean(require_tls)
        raise 'credhub.data_storage.require_tls must be set to `true` or `false`.'
      end
    end
  elsif datastorage_type != 'in-memory'
    raise 'credhub.data_storage.type must be set to "mysql", "postgres", or "in-memory".'
  end


  # Encryption Config

  encryption_keys = p('credhub.encryption.keys').to_a
  encryption_providers = p('credhub.encryption.providers').to_a
  active_keys = encryption_keys.select {|key| key['active']}

  if active_keys.empty? || active_keys.size > 1
    raise 'Exactly one encryption key must be marked as active in the deployment manifest. Please update your configuration to proceed.'
  end

  provider_types = encryption_providers.collect{|p| p['type']}.uniq

  if provider_types.any? { |p| !['internal', 'hsm', 'kms-plugin'].include?(p) }
    raise 'The provided encryption provider type is not valid. Valid provider types are "hsm", "internal", and "kms-plugin".'
  end

  hsm_providers = encryption_providers.select{|p| p['type'] == 'hsm'}

  # if hsm_providers.size > 1
  #   raise 'More than one hsm provider is not supported. Please update your configuration to proceed.'
  # end

  kms_plugin_providers = encryption_providers.select{|p| p['type'] == 'kms-plugin'}

    if kms_plugin_providers.size > 1
      raise 'More than one kms-plugin provider is not supported. Please update your configuration to proceed.'
    end

  providers = encryption_providers.each do |p|
    if p.key?('connection_properties') && !(p['type'] == 'hsm' || p['type'] == 'kms-plugin')
      raise 'connection_properties should only be provided for providers of type "hsm" or "kms-plugin".'
    end

    if p['type'] == 'kms-plugin'
      properties = p['connection_properties']
      property_keys = properties.keys

      if !property_keys.include?('endpoint')
        raise 'connection_properties for a provider of type "kms-plugin" must provide an "endpoint".'
      end
    end

    if p['type'] == 'hsm'
      if p.key?('connection_properties') && (p.key?('partition') || p.key?('partition_password'))
        raise '`partition` and `partition_password` cannot be provided both through `connection_properties` and directly'
      end
    end
  end

  provider_names = encryption_providers.collect{|p| p['name']}

  keys = encryption_keys.each do |k|

    if !((provider_names).include? k['provider_name'])
      raise '`provider_name` provided for key is not in list of providers'
    end

    if k.key?('key_properties') && (k.key?('encryption_password') || k.key?('encryption_key_name'))
      raise '`encryption_password` and `encryption_key_name` cannot be provided both through `key_properties` and directly'
    end

    if k.key?('encryption_password')
      if k['encryption_password'].nil? || k['encryption_password'].empty?
        raise 'credhub.encryption.encryption_password is not valid (must not be empty if provided).'
      end

      if k['encryption_password'].length < 20
        raise 'The encryption_password value must be at least 20 characters in length. Please update and redeploy.'
      end
    end

    if k.key?('dev_key')
      raise 'The key `dev_key` is not supported. You must rotate to using an `encryption_password` prior to upgrading to this version.'
    end
  end

%>
